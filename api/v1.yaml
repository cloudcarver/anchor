openapi: 3.0.0

info:
  title: Anchor
  version: "1.0"
  description: API for interacting with Anchor

servers:
  - url: /api/v1
    description: Base API path

paths:
  /auth/sign-in:
    post:
      summary: Sign in user
      description: Authenticate user and return access token
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        "401":
          description: Invalid credentials

  /auth/sign-out:
    post:
      summary: Sign out user
      description: Sign out user and invalidate all tokens
      operationId: signOut
      responses:
        "200":
          description: Successfully signed out
      security:
        - BearerAuth: []

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get a new access token using a refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Credentials"
        "401":
          description: Invalid or expired refresh token

  /tasks:
    get:
      summary: Get all tasks
      description: Get all tasks
      operationId: listTasks
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
  
  /events:
    get:
      summary: Get all events
      description: Get all events
      operationId: listEvents
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

  /orgs:
    get:
      summary: Get all organizations of which the user is a member
      description: Get all organizations of which the user is a member
      operationId: listOrgs
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Org"

  /tasks/{taskID}/try-execute:
    post:
      summary: Try to execute a task
      description: Try to execute a task
      operationId: tryExecuteTask
      parameters:
        - name: taskID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successfully tried to execute the task
        "404":
          description: Task not found
      security:
        - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SignInRequest:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
          description: User's name
        password:
          type: string
          format: password
          description: User's password

    Credentials:
      type: object
      required:
        - accessToken
        - refreshToken
        - tokenType
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token for obtaining new access tokens
        tokenType:
          type: string
          enum: ["Bearer"]
          description: Token type

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token obtained from sign-in

    Task:
      type: object
      required: [ID, attributes, spec, status, createdAt, updatedAt, events, attempts]
      properties:
        ID:
          type: integer
          format: int32
        attributes:
          $ref: "#/components/schemas/TaskAttributes"
        spec:
          $ref: "#/components/schemas/TaskSpec"
        status:
          type: string
          enum: ["pending", "completed", "failed", "paused"]
        uniqueTag:
          type: string
          description: Unique tag of the task
        startedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        events:
          $ref: "#/components/schemas/TaskEvents"
        attempts:
          type: integer
          format: int32
          description: The number of times the task has been attempted
        
    TaskEvents:
      type: object
      properties:
        onFailed:
          type: string
          description: The name of the task should be triggered when the task fails

    TaskSpec:
      type: object
      required: [type, payload]
      properties:
        type:
          type: string
        payload:
          type: string
          format: byte
          description: The JSONB of the spec of the task

    TaskAttributes:
      type: object
      properties:
        timeout:
          type: string
          description: Timeout of the task, e.g. 1h, 1d, 1w, 1m
        cronjob:
          $ref: "#/components/schemas/TaskCronjob"
        retryPolicy:
          $ref: "#/components/schemas/TaskRetryPolicy"

    TaskRetryPolicy:
      type: object
      required: [interval, maxAttempts]
      properties:
        interval:
          type: string
          description: Interval of the retry policy, e.g. 1h, 1d, 1w, 1m
        maxAttempts:
          type: integer
          format: int32
          description: Maximum number of attempts to retry the task, -1 means infinite retries

    TaskCronjob:
      type: object
      required: [cronExpression]
      properties:
        cronExpression:
          type: string

    Event:
      type: object
      required: [ID, spec, createdAt]
      properties:
        ID:
          type: integer
          format: int32
        spec:
          $ref: "#/components/schemas/EventSpec"
        createdAt:
          type: string
          format: date-time

    EventSpec:
      type: object
      required: [type]
      properties:
        type:
          type: string
          enum: ["TaskError", "TaskCompleted"]
        taskError:
          $ref: "#/components/schemas/EventTaskError"
        taskCompleted:
          $ref: "#/components/schemas/EventTaskCompleted"

    EventTaskError:
      type: object
      required: [taskID, error]
      properties:
        taskID:
          type: integer
          format: int32
        error:
          type: string

    EventTaskCompleted:
      type: object
      required: [taskID]
      properties:
        taskID:
          type: integer
          format: int32

    Org:
      type: object
      required: [ID, name, createdAt, updatedAt]
      properties:
        ID:
          type: integer
          format: int32
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

x-functions:
  GetOrgID:
    description: Get the organization ID from the request
    useContext: true
    return:
      schema:
        type: integer
        format: int32
      description: The organization ID
