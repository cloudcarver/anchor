// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/cloudcarver/anchor/pkg/app"
	"github.com/cloudcarver/anchor/pkg/asynctask"
	"github.com/cloudcarver/anchor/pkg/auth"
	"github.com/cloudcarver/anchor/pkg/config"
	"github.com/cloudcarver/anchor/pkg/controller"
	"github.com/cloudcarver/anchor/pkg/globalctx"
	"github.com/cloudcarver/anchor/pkg/macaroons"
	"github.com/cloudcarver/anchor/pkg/macaroons/store"
	"github.com/cloudcarver/anchor/pkg/metrics"
	"github.com/cloudcarver/anchor/pkg/server"
	"github.com/cloudcarver/anchor/pkg/service"
	"github.com/cloudcarver/anchor/pkg/taskcore"
	"github.com/cloudcarver/anchor/pkg/taskcore/worker"
	"github.com/cloudcarver/anchor/pkg/zcore/model"
	"github.com/cloudcarver/anchor/pkg/zgen/taskgen"
)

// Injectors from wire.go:

func InitializeApplication() (*app.Application, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	globalContext := globalctx.New()
	modelInterface, err := model.NewModel(configConfig)
	if err != nil {
		return nil, err
	}
	taskStoreInterface := taskcore.NewTaskStore(modelInterface)
	taskRunner := taskgen.NewTaskRunner(taskStoreInterface)
	keyStore := store.NewStore(modelInterface, taskRunner)
	caveatParser := auth.NewCaveatParser()
	macaroonManagerInterface := macaroons.NewMacaroonManager(keyStore, caveatParser)
	authInterface, err := auth.NewAuth(macaroonManagerInterface)
	if err != nil {
		return nil, err
	}
	serviceInterface := service.NewService(configConfig, modelInterface, authInterface)
	serverInterface := controller.NewController(serviceInterface, authInterface)
	validator := controller.NewValidator(modelInterface, authInterface)
	serverServer, err := server.NewServer(configConfig, globalContext, authInterface, serverInterface, validator)
	if err != nil {
		return nil, err
	}
	metricsServer := metrics.NewMetricsServer(configConfig, globalContext)
	executorInterface := asynctask.NewExecutor(modelInterface)
	taskHandler := taskgen.NewTaskHandler(executorInterface)
	workerWorker, err := worker.NewWorker(globalContext, modelInterface, taskHandler)
	if err != nil {
		return nil, err
	}
	debugServer := app.NewDebugServer(configConfig, globalContext)
	application := app.NewApplication(configConfig, serverServer, metricsServer, workerWorker, debugServer, authInterface, taskStoreInterface, serviceInterface)
	return application, nil
}
