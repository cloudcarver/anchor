// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/cloudcarver/anchor/wire"
	"myexampleapp/internal"
	"myexampleapp/internal/asynctask"
	"myexampleapp/internal/config"
	"myexampleapp/internal/handler"
	"myexampleapp/internal/zcore/initapp"
	"myexampleapp/internal/zcore/injection"
	"myexampleapp/internal/zcore/model"
	"myexampleapp/internal/zgen/taskgen"
)

// Injectors from wire.go:

func InitApp() (*initapp.App, error) {
	application, err := wire.InitializeApplication()
	if err != nil {
		return nil, err
	}
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	modelInterface, err := model.NewModel(configConfig)
	if err != nil {
		return nil, err
	}
	taskStoreInterface := injection.InjectTaskStore(application)
	taskRunner := taskgen.NewTaskRunner(taskStoreInterface)
	serverInterface, err := handler.NewHandler(modelInterface, taskRunner)
	if err != nil {
		return nil, err
	}
	authInterface := injection.InjectAuth(application)
	validator := handler.NewValidator(authInterface)
	executorInterface := asynctask.NewExecutor(modelInterface)
	taskHandler := taskgen.NewTaskHandler(executorInterface)
	serviceInterface := injection.InjectAnchorSvc(application)
	v := internal.Init(serviceInterface, taskRunner)
	app, err := initapp.NewApp(application, serverInterface, validator, taskHandler, v)
	if err != nil {
		return nil, err
	}
	return app, nil
}
