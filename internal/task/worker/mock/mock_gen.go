// Code generated by MockGen. DO NOT EDIT.
// Source: internal/task/worker/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/task/worker/interfaces.go -destination=internal/task/worker/mock/mock_gen.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apigen "github.com/cloudcarver/anchor/internal/apigen"
	model "github.com/cloudcarver/anchor/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskHandler is a mock of TaskHandler interface.
type MockTaskHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTaskHandlerMockRecorder
	isgomock struct{}
}

// MockTaskHandlerMockRecorder is the mock recorder for MockTaskHandler.
type MockTaskHandlerMockRecorder struct {
	mock *MockTaskHandler
}

// NewMockTaskHandler creates a new mock instance.
func NewMockTaskHandler(ctrl *gomock.Controller) *MockTaskHandler {
	mock := &MockTaskHandler{ctrl: ctrl}
	mock.recorder = &MockTaskHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskHandler) EXPECT() *MockTaskHandlerMockRecorder {
	return m.recorder
}

// HandleTask mocks base method.
func (m *MockTaskHandler) HandleTask(c *model.Context, spec *apigen.TaskSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTask", c, spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTask indicates an expected call of HandleTask.
func (mr *MockTaskHandlerMockRecorder) HandleTask(c, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTask", reflect.TypeOf((*MockTaskHandler)(nil).HandleTask), c, spec)
}

// MockTaskLifeCycleHandlerInterface is a mock of TaskLifeCycleHandlerInterface interface.
type MockTaskLifeCycleHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskLifeCycleHandlerInterfaceMockRecorder
	isgomock struct{}
}

// MockTaskLifeCycleHandlerInterfaceMockRecorder is the mock recorder for MockTaskLifeCycleHandlerInterface.
type MockTaskLifeCycleHandlerInterfaceMockRecorder struct {
	mock *MockTaskLifeCycleHandlerInterface
}

// NewMockTaskLifeCycleHandlerInterface creates a new mock instance.
func NewMockTaskLifeCycleHandlerInterface(ctrl *gomock.Controller) *MockTaskLifeCycleHandlerInterface {
	mock := &MockTaskLifeCycleHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockTaskLifeCycleHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskLifeCycleHandlerInterface) EXPECT() *MockTaskLifeCycleHandlerInterfaceMockRecorder {
	return m.recorder
}

// HandleAttributes mocks base method.
func (m *MockTaskLifeCycleHandlerInterface) HandleAttributes(ctx context.Context, task apigen.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAttributes", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAttributes indicates an expected call of HandleAttributes.
func (mr *MockTaskLifeCycleHandlerInterfaceMockRecorder) HandleAttributes(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAttributes", reflect.TypeOf((*MockTaskLifeCycleHandlerInterface)(nil).HandleAttributes), ctx, task)
}

// HandleCompleted mocks base method.
func (m *MockTaskLifeCycleHandlerInterface) HandleCompleted(ctx context.Context, task apigen.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCompleted", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleCompleted indicates an expected call of HandleCompleted.
func (mr *MockTaskLifeCycleHandlerInterfaceMockRecorder) HandleCompleted(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCompleted", reflect.TypeOf((*MockTaskLifeCycleHandlerInterface)(nil).HandleCompleted), ctx, task)
}

// HandleFailed mocks base method.
func (m *MockTaskLifeCycleHandlerInterface) HandleFailed(ctx context.Context, task apigen.Task, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleFailed", ctx, task, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleFailed indicates an expected call of HandleFailed.
func (mr *MockTaskLifeCycleHandlerInterfaceMockRecorder) HandleFailed(ctx, task, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFailed", reflect.TypeOf((*MockTaskLifeCycleHandlerInterface)(nil).HandleFailed), ctx, task, err)
}
