// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/model.go
//
// Generated by this command:
//
//	mockgen -source=internal/model/model.go -destination=internal/model/mock_gen.go -package=model
//

// Package model is a generated GoMock package.
package model

import (
	context "context"
	reflect "reflect"

	querier "github.com/cloudcarver/anchor/internal/model/querier"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockModelInterface is a mock of ModelInterface interface.
type MockModelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModelInterfaceMockRecorder
	isgomock struct{}
}

// MockModelInterfaceMockRecorder is the mock recorder for MockModelInterface.
type MockModelInterfaceMockRecorder struct {
	mock *MockModelInterface
}

// NewMockModelInterface creates a new mock instance.
func NewMockModelInterface(ctrl *gomock.Controller) *MockModelInterface {
	mock := &MockModelInterface{ctrl: ctrl}
	mock.recorder = &MockModelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInterface) EXPECT() *MockModelInterfaceMockRecorder {
	return m.recorder
}

// CleanUpKeys mocks base method.
func (m *MockModelInterface) CleanUpKeys(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpKeys", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpKeys indicates an expected call of CleanUpKeys.
func (mr *MockModelInterfaceMockRecorder) CleanUpKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpKeys", reflect.TypeOf((*MockModelInterface)(nil).CleanUpKeys), ctx)
}

// CreateOrganization mocks base method.
func (m *MockModelInterface) CreateOrganization(ctx context.Context, name string) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", ctx, name)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockModelInterfaceMockRecorder) CreateOrganization(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockModelInterface)(nil).CreateOrganization), ctx, name)
}

// CreateOrganizationOwner mocks base method.
func (m *MockModelInterface) CreateOrganizationOwner(ctx context.Context, arg querier.CreateOrganizationOwnerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganizationOwner", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganizationOwner indicates an expected call of CreateOrganizationOwner.
func (mr *MockModelInterfaceMockRecorder) CreateOrganizationOwner(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganizationOwner", reflect.TypeOf((*MockModelInterface)(nil).CreateOrganizationOwner), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockModelInterface) CreateUser(ctx context.Context, arg querier.CreateUserParams) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockModelInterfaceMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockModelInterface)(nil).CreateUser), ctx, arg)
}

// DeleteOrganization mocks base method.
func (m *MockModelInterface) DeleteOrganization(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockModelInterfaceMockRecorder) DeleteOrganization(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockModelInterface)(nil).DeleteOrganization), ctx, id)
}

// DeleteRefreshToken mocks base method.
func (m *MockModelInterface) DeleteRefreshToken(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockModelInterfaceMockRecorder) DeleteRefreshToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).DeleteRefreshToken), ctx, token)
}

// DeleteUserByName mocks base method.
func (m *MockModelInterface) DeleteUserByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByName indicates an expected call of DeleteUserByName.
func (mr *MockModelInterfaceMockRecorder) DeleteUserByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByName", reflect.TypeOf((*MockModelInterface)(nil).DeleteUserByName), ctx, name)
}

// GetKeyByID mocks base method.
func (m *MockModelInterface) GetKeyByID(ctx context.Context, id uuid.UUID) (*querier.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyByID", ctx, id)
	ret0, _ := ret[0].(*querier.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyByID indicates an expected call of GetKeyByID.
func (mr *MockModelInterfaceMockRecorder) GetKeyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByID", reflect.TypeOf((*MockModelInterface)(nil).GetKeyByID), ctx, id)
}

// GetKeys mocks base method.
func (m *MockModelInterface) GetKeys(ctx context.Context) ([]*querier.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", ctx)
	ret0, _ := ret[0].([]*querier.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockModelInterfaceMockRecorder) GetKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockModelInterface)(nil).GetKeys), ctx)
}

// GetLatestKey mocks base method.
func (m *MockModelInterface) GetLatestKey(ctx context.Context) (*querier.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestKey", ctx)
	ret0, _ := ret[0].(*querier.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestKey indicates an expected call of GetLatestKey.
func (mr *MockModelInterfaceMockRecorder) GetLatestKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestKey", reflect.TypeOf((*MockModelInterface)(nil).GetLatestKey), ctx)
}

// GetOrganization mocks base method.
func (m *MockModelInterface) GetOrganization(ctx context.Context, id int32) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", ctx, id)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockModelInterfaceMockRecorder) GetOrganization(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockModelInterface)(nil).GetOrganization), ctx, id)
}

// GetRefreshToken mocks base method.
func (m *MockModelInterface) GetRefreshToken(ctx context.Context, token string) (*querier.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", ctx, token)
	ret0, _ := ret[0].(*querier.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockModelInterfaceMockRecorder) GetRefreshToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).GetRefreshToken), ctx, token)
}

// GetUser mocks base method.
func (m *MockModelInterface) GetUser(ctx context.Context, id int32) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockModelInterfaceMockRecorder) GetUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockModelInterface)(nil).GetUser), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockModelInterface) GetUserByName(ctx context.Context, name string) (*querier.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, name)
	ret0, _ := ret[0].(*querier.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockModelInterfaceMockRecorder) GetUserByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockModelInterface)(nil).GetUserByName), ctx, name)
}

// InTransaction mocks base method.
func (m *MockModelInterface) InTransaction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTransaction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// InTransaction indicates an expected call of InTransaction.
func (mr *MockModelInterfaceMockRecorder) InTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTransaction", reflect.TypeOf((*MockModelInterface)(nil).InTransaction))
}

// ListOrganizations mocks base method.
func (m *MockModelInterface) ListOrganizations(ctx context.Context) ([]*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].([]*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockModelInterfaceMockRecorder) ListOrganizations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockModelInterface)(nil).ListOrganizations), ctx)
}

// RunTransaction mocks base method.
func (m *MockModelInterface) RunTransaction(ctx context.Context, f func(ModelInterface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockModelInterfaceMockRecorder) RunTransaction(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockModelInterface)(nil).RunTransaction), ctx, f)
}

// StoreKey mocks base method.
func (m *MockModelInterface) StoreKey(ctx context.Context, arg querier.StoreKeyParams) (*querier.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreKey", ctx, arg)
	ret0, _ := ret[0].(*querier.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreKey indicates an expected call of StoreKey.
func (mr *MockModelInterfaceMockRecorder) StoreKey(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreKey", reflect.TypeOf((*MockModelInterface)(nil).StoreKey), ctx, arg)
}

// StoreRefreshToken mocks base method.
func (m *MockModelInterface) StoreRefreshToken(ctx context.Context, arg querier.StoreRefreshTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockModelInterfaceMockRecorder) StoreRefreshToken(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockModelInterface)(nil).StoreRefreshToken), ctx, arg)
}

// UpdateOrganization mocks base method.
func (m *MockModelInterface) UpdateOrganization(ctx context.Context, arg querier.UpdateOrganizationParams) (*querier.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", ctx, arg)
	ret0, _ := ret[0].(*querier.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockModelInterfaceMockRecorder) UpdateOrganization(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockModelInterface)(nil).UpdateOrganization), ctx, arg)
}
