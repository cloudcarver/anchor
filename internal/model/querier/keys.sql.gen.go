// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: keys.sql

package querier

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const cleanUpKeys = `-- name: CleanUpKeys :exec
DELETE FROM keys WHERE expired_at < NOW()
`

func (q *Queries) CleanUpKeys(ctx context.Context) error {
	_, err := q.db.Exec(ctx, cleanUpKeys)
	return err
}

const getKeyByID = `-- name: GetKeyByID :one
SELECT id, public_key, private_key, expired_at, created_at, updated_at FROM keys WHERE id = $1 AND expired_at > NOW()
`

func (q *Queries) GetKeyByID(ctx context.Context, id uuid.UUID) (*Key, error) {
	row := q.db.QueryRow(ctx, getKeyByID, id)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getKeys = `-- name: GetKeys :many
SELECT id, public_key, private_key, expired_at, created_at, updated_at FROM keys WHERE expired_at > NOW()
`

func (q *Queries) GetKeys(ctx context.Context) ([]*Key, error) {
	rows, err := q.db.Query(ctx, getKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.ID,
			&i.PublicKey,
			&i.PrivateKey,
			&i.ExpiredAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestKey = `-- name: GetLatestKey :one
SELECT id, public_key, private_key, expired_at, created_at, updated_at FROM keys ORDER BY created_at DESC LIMIT 1
`

func (q *Queries) GetLatestKey(ctx context.Context) (*Key, error) {
	row := q.db.QueryRow(ctx, getLatestKey)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const storeKey = `-- name: StoreKey :one
INSERT INTO keys (public_key, private_key, expired_at) VALUES ($1, $2, $3) RETURNING id, public_key, private_key, expired_at, created_at, updated_at
`

type StoreKeyParams struct {
	PublicKey  string
	PrivateKey string
	ExpiredAt  time.Time
}

func (q *Queries) StoreKey(ctx context.Context, arg StoreKeyParams) (*Key, error) {
	row := q.db.QueryRow(ctx, storeKey, arg.PublicKey, arg.PrivateKey, arg.ExpiredAt)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrivateKey,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
