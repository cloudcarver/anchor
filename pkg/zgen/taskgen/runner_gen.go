// This file is generated by tools, DO NOT EDIT.
package taskgen

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/cloudcarver/anchor/pkg/zgen/apigen"
	"github.com/cloudcarver/anchor/pkg/taskcore"
	"github.com/cloudcarver/anchor/pkg/taskcore/worker"
	"github.com/cloudcarver/anchor/pkg/utils"
	"github.com/pkg/errors"
	"github.com/jackc/pgx/v5"
)

func init() {
	utils.Noop()
}

const ( 
	DeleteOpaqueKey = "deleteOpaqueKey" 

	OnOrgCreated = "onOrgCreated" 
)

type TaskRunner interface { 
    // Delete an opaque key
	RunDeleteOpaqueKey(ctx context.Context, params *DeleteOpaqueKeyParameters, overrides ...taskcore.TaskOverride) (int32, error)
    // Delete an opaque key
	RunDeleteOpaqueKeyWithTx(ctx context.Context, tx pgx.Tx, params *DeleteOpaqueKeyParameters, overrides ...taskcore.TaskOverride) (int32, error)

    // On org created
	RunOnOrgCreated(ctx context.Context, params *OnOrgCreatedParameters, overrides ...taskcore.TaskOverride) (int32, error)
    // On org created
	RunOnOrgCreatedWithTx(ctx context.Context, tx pgx.Tx, params *OnOrgCreatedParameters, overrides ...taskcore.TaskOverride) (int32, error)
}

type Client struct {
	taskStore taskcore.TaskStoreInterface
	now       func() time.Time
}

func NewTaskRunner(taskStore taskcore.TaskStoreInterface) TaskRunner {
	return &Client{
		taskStore: taskStore,
		now:       time.Now,
	}
}


func (c *Client) RunDeleteOpaqueKey(ctx context.Context, params *DeleteOpaqueKeyParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	return c.runDeleteOpaqueKey(ctx, c.taskStore, params, overrides...)
}

func (c *Client) RunDeleteOpaqueKeyWithTx(ctx context.Context, tx pgx.Tx, params *DeleteOpaqueKeyParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	return c.runDeleteOpaqueKey(ctx, c.taskStore.WithTx(tx), params, overrides...)
}

func (c *Client) runDeleteOpaqueKey(ctx context.Context, taskstore taskcore.TaskStoreInterface, params *DeleteOpaqueKeyParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	payload, err := params.Marshal()
	if err != nil {
		return 0, err
	}

	spec := apigen.TaskSpec{
		Type:    DeleteOpaqueKey,
		Payload: payload,
	}
	attributes := apigen.TaskAttributes{}
	
	attributes.RetryPolicy = &apigen.TaskRetryPolicy{
		Interval:             "30m",
		AlwaysRetryOnFailure: true,
	}
	
	task := &apigen.Task{
		Attributes: attributes,
		Spec:       spec,
		Status:     apigen.Pending,
	}
	
	for _, override := range overrides {
		if err := override(task); err != nil {
			return 0, errors.Wrap(err, "failed to apply task override")
		}
	}
	taskID, err := taskstore.PushTask(ctx, task)
	if err != nil {
		return 0, err
	}
	return taskID, nil
}
func (c *Client) RunOnOrgCreated(ctx context.Context, params *OnOrgCreatedParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	return c.runOnOrgCreated(ctx, c.taskStore, params, overrides...)
}

func (c *Client) RunOnOrgCreatedWithTx(ctx context.Context, tx pgx.Tx, params *OnOrgCreatedParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	return c.runOnOrgCreated(ctx, c.taskStore.WithTx(tx), params, overrides...)
}

func (c *Client) runOnOrgCreated(ctx context.Context, taskstore taskcore.TaskStoreInterface, params *OnOrgCreatedParameters, overrides ...taskcore.TaskOverride) (int32, error) {
	payload, err := params.Marshal()
	if err != nil {
		return 0, err
	}

	spec := apigen.TaskSpec{
		Type:    OnOrgCreated,
		Payload: payload,
	}
	attributes := apigen.TaskAttributes{}
	
	attributes.RetryPolicy = &apigen.TaskRetryPolicy{
		Interval:             "30m",
		AlwaysRetryOnFailure: true,
	}
	
	task := &apigen.Task{
		Attributes: attributes,
		Spec:       spec,
		Status:     apigen.Pending,
	}
	
	for _, override := range overrides {
		if err := override(task); err != nil {
			return 0, errors.Wrap(err, "failed to apply task override")
		}
	}
	taskID, err := taskstore.PushTask(ctx, task)
	if err != nil {
		return 0, err
	}
	return taskID, nil
}


type DeleteOpaqueKeyParameters struct { 
    // The ID of the opaque key to delete
	KeyID int64 `json:"keyID" yaml:"keyID"`
}

type OnOrgCreatedParameters struct { 
    // The ID of the org
	OrgID int32 `json:"orgID" yaml:"orgID"`
}

func (r *DeleteOpaqueKeyParameters) Parse(spec json.RawMessage) error {
	return json.Unmarshal(spec, r)
}

func (r *DeleteOpaqueKeyParameters) Marshal() (json.RawMessage, error) {
	return json.Marshal(r)
}
func (r *OnOrgCreatedParameters) Parse(spec json.RawMessage) error {
	return json.Unmarshal(spec, r)
}

func (r *OnOrgCreatedParameters) Marshal() (json.RawMessage, error) {
	return json.Marshal(r)
}

type ExecutorInterface interface { 
    // Delete an opaque key
	ExecuteDeleteOpaqueKey(ctx context.Context, params *DeleteOpaqueKeyParameters) error

    // On org created
	ExecuteOnOrgCreated(ctx context.Context, params *OnOrgCreatedParameters) error
}

type TaskHandler struct {
	executor ExecutorInterface

	externalTaskHandler []worker.TaskHandler
}

func NewTaskHandler(executor ExecutorInterface) worker.TaskHandler {
	return &TaskHandler{
		executor: executor,
	}
}

func (f *TaskHandler) RegisterTaskHandler(handler worker.TaskHandler) {
	f.externalTaskHandler = append(f.externalTaskHandler, handler)
}

func (f *TaskHandler) HandleTask(ctx context.Context, spec worker.TaskSpec) error {
	for _, handler := range f.externalTaskHandler {
		if err := handler.HandleTask(ctx, spec); err != nil {
			if errors.Is(err, worker.ErrUnknownTaskType) {
				continue
			}
			return err
		}
		return nil
	}

	switch spec.GetType() { 
	case DeleteOpaqueKey:
		var params DeleteOpaqueKeyParameters
		if err := params.Parse(spec.GetPayload()); err != nil {
			return fmt.Errorf("failed to parse deleteOpaqueKey parameters: %w", err)
		}
		return f.executor.ExecuteDeleteOpaqueKey(ctx, &params)
		
	case OnOrgCreated:
		var params OnOrgCreatedParameters
		if err := params.Parse(spec.GetPayload()); err != nil {
			return fmt.Errorf("failed to parse onOrgCreated parameters: %w", err)
		}
		return f.executor.ExecuteOnOrgCreated(ctx, &params)
		
	default:
		return fmt.Errorf("unknown handler %s", spec.GetType())
	}
}
