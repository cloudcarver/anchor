// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orgs.sql

package querier

import (
	"context"
)

const createOrg = `-- name: CreateOrg :one
INSERT INTO anchor.orgs (name) VALUES ($1) RETURNING id, name, tz, created_at, updated_at
`

func (q *Queries) CreateOrg(ctx context.Context, name string) (*AnchorOrg, error) {
	row := q.db.QueryRow(ctx, createOrg, name)
	var i AnchorOrg
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tz,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrg = `-- name: GetOrg :one
SELECT id, name, tz, created_at, updated_at FROM anchor.orgs WHERE id = $1
`

func (q *Queries) GetOrg(ctx context.Context, id int32) (*AnchorOrg, error) {
	row := q.db.QueryRow(ctx, getOrg, id)
	var i AnchorOrg
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tz,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrgByName = `-- name: GetOrgByName :one
SELECT id, name, tz, created_at, updated_at FROM anchor.orgs WHERE name = $1
`

func (q *Queries) GetOrgByName(ctx context.Context, name string) (*AnchorOrg, error) {
	row := q.db.QueryRow(ctx, getOrgByName, name)
	var i AnchorOrg
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tz,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const insertOrgOwner = `-- name: InsertOrgOwner :one
INSERT INTO anchor.org_owners (org_id, user_id) VALUES ($1, $2) RETURNING org_id, user_id, created_at
`

type InsertOrgOwnerParams struct {
	OrgID  int32
	UserID int32
}

func (q *Queries) InsertOrgOwner(ctx context.Context, arg InsertOrgOwnerParams) (*AnchorOrgOwner, error) {
	row := q.db.QueryRow(ctx, insertOrgOwner, arg.OrgID, arg.UserID)
	var i AnchorOrgOwner
	err := row.Scan(&i.OrgID, &i.UserID, &i.CreatedAt)
	return &i, err
}

const insertOrgUser = `-- name: InsertOrgUser :one
INSERT INTO anchor.org_users (org_id, user_id) VALUES ($1, $2) RETURNING org_id, user_id, created_at, updated_at
`

type InsertOrgUserParams struct {
	OrgID  int32
	UserID int32
}

func (q *Queries) InsertOrgUser(ctx context.Context, arg InsertOrgUserParams) (*AnchorOrgUser, error) {
	row := q.db.QueryRow(ctx, insertOrgUser, arg.OrgID, arg.UserID)
	var i AnchorOrgUser
	err := row.Scan(
		&i.OrgID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
