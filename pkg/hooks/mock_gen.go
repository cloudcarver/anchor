// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/hooks/hooks.go
//
// Generated by this command:
//
//	mockgen -source pkg/hooks/hooks.go -destination pkg/hooks/mock_gen.go -package hooks
//

// Package hooks is a generated GoMock package.
package hooks

import (
	context "context"
	reflect "reflect"

	macaroons "github.com/cloudcarver/anclax/pkg/macaroons"
	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockAnclaxHookInterface is a mock of AnclaxHookInterface interface.
type MockAnclaxHookInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAnclaxHookInterfaceMockRecorder
	isgomock struct{}
}

// MockAnclaxHookInterfaceMockRecorder is the mock recorder for MockAnclaxHookInterface.
type MockAnclaxHookInterfaceMockRecorder struct {
	mock *MockAnclaxHookInterface
}

// NewMockAnclaxHookInterface creates a new mock instance.
func NewMockAnclaxHookInterface(ctrl *gomock.Controller) *MockAnclaxHookInterface {
	mock := &MockAnclaxHookInterface{ctrl: ctrl}
	mock.recorder = &MockAnclaxHookInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnclaxHookInterface) EXPECT() *MockAnclaxHookInterfaceMockRecorder {
	return m.recorder
}

// OnCreateToken mocks base method.
func (m *MockAnclaxHookInterface) OnCreateToken(ctx context.Context, userID int32, macaroon *macaroons.Macaroon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnCreateToken", ctx, userID, macaroon)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnCreateToken indicates an expected call of OnCreateToken.
func (mr *MockAnclaxHookInterfaceMockRecorder) OnCreateToken(ctx, userID, macaroon any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnCreateToken", reflect.TypeOf((*MockAnclaxHookInterface)(nil).OnCreateToken), ctx, userID, macaroon)
}

// OnOrgCreated mocks base method.
func (m *MockAnclaxHookInterface) OnOrgCreated(ctx context.Context, tx pgx.Tx, orgID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnOrgCreated", ctx, tx, orgID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnOrgCreated indicates an expected call of OnOrgCreated.
func (mr *MockAnclaxHookInterfaceMockRecorder) OnOrgCreated(ctx, tx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOrgCreated", reflect.TypeOf((*MockAnclaxHookInterface)(nil).OnOrgCreated), ctx, tx, orgID)
}

// OnUserCreated mocks base method.
func (m *MockAnclaxHookInterface) OnUserCreated(ctx context.Context, tx pgx.Tx, userID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnUserCreated", ctx, tx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnUserCreated indicates an expected call of OnUserCreated.
func (mr *MockAnclaxHookInterfaceMockRecorder) OnUserCreated(ctx, tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnUserCreated", reflect.TypeOf((*MockAnclaxHookInterface)(nil).OnUserCreated), ctx, tx, userID)
}

// RegisterOnCreateToken mocks base method.
func (m *MockAnclaxHookInterface) RegisterOnCreateToken(hook OnCreateToken) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterOnCreateToken", hook)
}

// RegisterOnCreateToken indicates an expected call of RegisterOnCreateToken.
func (mr *MockAnclaxHookInterfaceMockRecorder) RegisterOnCreateToken(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOnCreateToken", reflect.TypeOf((*MockAnclaxHookInterface)(nil).RegisterOnCreateToken), hook)
}

// RegisterOnOrgCreated mocks base method.
func (m *MockAnclaxHookInterface) RegisterOnOrgCreated(hook OnOrgCreated) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterOnOrgCreated", hook)
}

// RegisterOnOrgCreated indicates an expected call of RegisterOnOrgCreated.
func (mr *MockAnclaxHookInterfaceMockRecorder) RegisterOnOrgCreated(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOnOrgCreated", reflect.TypeOf((*MockAnclaxHookInterface)(nil).RegisterOnOrgCreated), hook)
}

// RegisterOnUserCreated mocks base method.
func (m *MockAnclaxHookInterface) RegisterOnUserCreated(hook OnUserCreated) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterOnUserCreated", hook)
}

// RegisterOnUserCreated indicates an expected call of RegisterOnUserCreated.
func (mr *MockAnclaxHookInterfaceMockRecorder) RegisterOnUserCreated(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOnUserCreated", reflect.TypeOf((*MockAnclaxHookInterface)(nil).RegisterOnUserCreated), hook)
}
