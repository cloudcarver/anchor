package codegen

var structTemplate = `type {{.StructName}} struct { {{range .Fields}}
{{.Description}}
	{{.Name}} {{.Type}} {{.Tag}}
{{end}}}`

var codeFileTemplate = `// This file is generated by tools, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/cloudcarver/anchor/pkg/apigen"
	"github.com/cloudcarver/anchor/pkg/task"
	"github.com/cloudcarver/anchor/pkg/task/worker"
	"github.com/cloudcarver/anchor/pkg/utils"
	"github.com/pkg/errors"
)

func init() {
	utils.Noop()
}

type TaskOverride = func(task *apigen.Task) error

const ( {{range .Functions}}
	{{upperFirst .Name}} = "{{.Name}}" 
{{end}})

type TaskRunner interface { {{range .Functions}}
{{.Description}}
	{{upperFirst .Name}}(ctx context.Context, params *{{.ParameterType}}, overrides ...TaskOverride) (int32, error)
{{end}}}

type Client struct {
	taskStore task.TaskStoreInterface
	now       func() time.Time
}

func NewTaskRunner(taskStore task.TaskStoreInterface) TaskRunner {
	return &Client{
		taskStore: taskStore,
		now:       time.Now,
	}
}

{{range .Functions}}
func (c *Client) {{upperFirst .Name}}(ctx context.Context, params *{{.ParameterType}}, overrides ...TaskOverride) (int32, error) {
	payload, err := params.Marshal()
	if err != nil {
		return 0, err
	}

	spec := apigen.TaskSpec{
		Type:    {{upperFirst .Name}},
		Payload: payload,
	}
	attributes := apigen.TaskAttributes{}
	{{if .Timeout }}attributes.Timeout = utils.Ptr("{{.Timeout}}"){{end}}
	{{if .RetryPolicy }}attributes.RetryPolicy = &apigen.TaskRetryPolicy{
		Interval:             "{{.RetryPolicy.Interval}}",
		AlwaysRetryOnFailure: {{.RetryPolicy.AlwaysRetryOnFailure}},
	}{{end}}
	{{if .Cronjob }}attributes.Cronjob = &apigen.TaskCronjob{
		CronExpression: "{{.Cronjob.CronExpression}}",
	}{{end}}
	task := &apigen.Task{
		Attributes: attributes,
		Spec:       spec,
		Status:     apigen.Pending,
	}
	{{if .Delay }}delay, err := time.ParseDuration("{{.Delay}}")
	if err != nil {
		return fmt.Errorf("failed to parse delay: %w", err)
	}
	task.StartedAt = utils.Ptr(c.now().Add(delay)){{end}}
	for _, override := range overrides {
		if err := override(task); err != nil {
			return 0, errors.Wrap(err, "failed to apply task override")
		}
	}
	taskID, err := c.taskStore.PushTask(ctx, task)
	if err != nil {
		return 0, err
	}
	return taskID, nil
}{{end}}

{{.StructDefs}}{{range .Functions}}
func (r *{{.ParameterType}}) Parse(spec json.RawMessage) error {
	return json.Unmarshal(spec, r)
}

func (r *{{.ParameterType}}) Marshal() (json.RawMessage, error) {
	return json.Marshal(r)
}{{end}}

type ExecutorInterface interface { {{range .Functions}}
{{.Description}}
	{{upperFirst .Name}}(ctx context.Context, params *{{.ParameterType}}) error
{{end}}}

type TaskHandler struct {
	executor ExecutorInterface

	externalTaskHandler []worker.TaskHandler
}

func NewTaskHandler(executor ExecutorInterface) worker.TaskHandler {
	return &TaskHandler{
		executor: executor,
	}
}

func (f *TaskHandler) RegisterTaskHandler(handler worker.TaskHandler) {
	f.externalTaskHandler = append(f.externalTaskHandler, handler)
}

func (f *TaskHandler) HandleTask(ctx context.Context, spec worker.TaskSpec) error {
	for _, handler := range f.externalTaskHandler {
		if err := handler.HandleTask(ctx, spec); err != nil {
			if errors.Is(err, worker.ErrUnknownTaskType) {
				continue
			}
			return err
		}
		return nil
	}

	switch spec.GetType() { {{range .Functions}}
	case {{upperFirst .Name}}:
		var params {{.ParameterType}}
		if err := params.Parse(spec.GetPayload()); err != nil {
			return fmt.Errorf("failed to parse {{.Name}} parameters: %w", err)
		}
		return f.executor.{{upperFirst .Name}}(ctx, &params)
		{{end}}
	default:
		return fmt.Errorf("unknown handler %s", spec.GetType())
	}
}
`
