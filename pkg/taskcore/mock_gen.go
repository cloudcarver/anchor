// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/taskcore/interfaces.go
//
// Generated by this command:
//
//	mockgen -source pkg/taskcore/interfaces.go -destination pkg/taskcore/mock_gen.go -package taskcore
//

// Package taskcore is a generated GoMock package.
package taskcore

import (
	context "context"
	json "encoding/json"
	reflect "reflect"

	apigen "github.com/cloudcarver/anclax/pkg/zgen/apigen"
	pgx "github.com/jackc/pgx/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskStoreInterface is a mock of TaskStoreInterface interface.
type MockTaskStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStoreInterfaceMockRecorder
	isgomock struct{}
}

// MockTaskStoreInterfaceMockRecorder is the mock recorder for MockTaskStoreInterface.
type MockTaskStoreInterfaceMockRecorder struct {
	mock *MockTaskStoreInterface
}

// NewMockTaskStoreInterface creates a new mock instance.
func NewMockTaskStoreInterface(ctrl *gomock.Controller) *MockTaskStoreInterface {
	mock := &MockTaskStoreInterface{ctrl: ctrl}
	mock.recorder = &MockTaskStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStoreInterface) EXPECT() *MockTaskStoreInterfaceMockRecorder {
	return m.recorder
}

// GetTaskByUniqueTag mocks base method.
func (m *MockTaskStoreInterface) GetTaskByUniqueTag(ctx context.Context, uniqueTag string) (*apigen.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByUniqueTag", ctx, uniqueTag)
	ret0, _ := ret[0].(*apigen.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByUniqueTag indicates an expected call of GetTaskByUniqueTag.
func (mr *MockTaskStoreInterfaceMockRecorder) GetTaskByUniqueTag(ctx, uniqueTag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByUniqueTag", reflect.TypeOf((*MockTaskStoreInterface)(nil).GetTaskByUniqueTag), ctx, uniqueTag)
}

// PauseTask mocks base method.
func (m *MockTaskStoreInterface) PauseTask(ctx context.Context, taskID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseTask", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseTask indicates an expected call of PauseTask.
func (mr *MockTaskStoreInterfaceMockRecorder) PauseTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).PauseTask), ctx, taskID)
}

// PushTask mocks base method.
func (m *MockTaskStoreInterface) PushTask(ctx context.Context, task *apigen.Task) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushTask", ctx, task)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushTask indicates an expected call of PushTask.
func (mr *MockTaskStoreInterfaceMockRecorder) PushTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).PushTask), ctx, task)
}

// ResumeTask mocks base method.
func (m *MockTaskStoreInterface) ResumeTask(ctx context.Context, taskID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeTask", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeTask indicates an expected call of ResumeTask.
func (mr *MockTaskStoreInterfaceMockRecorder) ResumeTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).ResumeTask), ctx, taskID)
}

// UpdateCronJob mocks base method.
func (m *MockTaskStoreInterface) UpdateCronJob(ctx context.Context, taskID int32, cronExpression string, spec json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCronJob", ctx, taskID, cronExpression, spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCronJob indicates an expected call of UpdateCronJob.
func (mr *MockTaskStoreInterfaceMockRecorder) UpdateCronJob(ctx, taskID, cronExpression, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCronJob", reflect.TypeOf((*MockTaskStoreInterface)(nil).UpdateCronJob), ctx, taskID, cronExpression, spec)
}

// WithTx mocks base method.
func (m *MockTaskStoreInterface) WithTx(tx pgx.Tx) TaskStoreInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(TaskStoreInterface)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockTaskStoreInterfaceMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockTaskStoreInterface)(nil).WithTx), tx)
}
