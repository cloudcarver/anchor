// Code generated by MockGen. DO NOT EDIT.
// Source: internal/task/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/task/interfaces.go -destination=internal/task/mock_gen.go -package=task
//

// Package task is a generated GoMock package.
package task

import (
	json "encoding/json"
	reflect "reflect"

	apigen "github.com/cloudcarver/anchor/pkg/apigen"
	model "github.com/cloudcarver/anchor/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskStoreInterface is a mock of TaskStoreInterface interface.
type MockTaskStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStoreInterfaceMockRecorder
	isgomock struct{}
}

// MockTaskStoreInterfaceMockRecorder is the mock recorder for MockTaskStoreInterface.
type MockTaskStoreInterfaceMockRecorder struct {
	mock *MockTaskStoreInterface
}

// NewMockTaskStoreInterface creates a new mock instance.
func NewMockTaskStoreInterface(ctrl *gomock.Controller) *MockTaskStoreInterface {
	mock := &MockTaskStoreInterface{ctrl: ctrl}
	mock.recorder = &MockTaskStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStoreInterface) EXPECT() *MockTaskStoreInterfaceMockRecorder {
	return m.recorder
}

// PauseCronJob mocks base method.
func (m *MockTaskStoreInterface) PauseCronJob(c *model.Context, taskID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseCronJob", c, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseCronJob indicates an expected call of PauseCronJob.
func (mr *MockTaskStoreInterfaceMockRecorder) PauseCronJob(c, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseCronJob", reflect.TypeOf((*MockTaskStoreInterface)(nil).PauseCronJob), c, taskID)
}

// PushTask mocks base method.
func (m *MockTaskStoreInterface) PushTask(c *model.Context, task *apigen.Task) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushTask", c, task)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushTask indicates an expected call of PushTask.
func (mr *MockTaskStoreInterfaceMockRecorder) PushTask(c, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).PushTask), c, task)
}

// ResumeCronJob mocks base method.
func (m *MockTaskStoreInterface) ResumeCronJob(c *model.Context, taskID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeCronJob", c, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeCronJob indicates an expected call of ResumeCronJob.
func (mr *MockTaskStoreInterfaceMockRecorder) ResumeCronJob(c, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeCronJob", reflect.TypeOf((*MockTaskStoreInterface)(nil).ResumeCronJob), c, taskID)
}

// UpdateCronJob mocks base method.
func (m *MockTaskStoreInterface) UpdateCronJob(c *model.Context, taskID int32, cronExpression string, spec json.RawMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCronJob", c, taskID, cronExpression, spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCronJob indicates an expected call of UpdateCronJob.
func (mr *MockTaskStoreInterfaceMockRecorder) UpdateCronJob(c, taskID, cronExpression, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCronJob", reflect.TypeOf((*MockTaskStoreInterface)(nil).UpdateCronJob), c, taskID, cronExpression, spec)
}
